package ${package}.${moduleName};

import com.mf.center.common.Page;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${className}Service {

    private static Logger logger = LoggerFactory.getLogger(${className}Service.class);

    @Autowired
    private ${className}Dao dao;    // ${comments}Dao

    /**
     * @方法说明:新增记录
     **/
    @Transactional
    public long save(${className} ${classname}) {
        return dao.save(${classname});
    }

    /**
	 * @方法说明:批量插入记录
	 **/
    @Transactional
    public int[] insertBatch(List<${className}> list) {
        return dao.insertBatch(list);
    }

    /**
     * @方法说明:新增记录并返回主键
     **/
    @Transactional
    public long saveReturnKey(${className} ${classname}) {
        return dao.saveReturnKey(${classname});
    }

    /**
     * @方法说明:删除记录(多条)
     **/
    @Transactional
    public int delete(Long ids[]) {
        //return dao.deleteLogic(ids);//逻辑删除
        return dao.delete(ids);//物理删除
    }

    /**
     * @方法说明:按ID查找单个实体
     **/
    public ${className} findById(Long id) {
        return dao.findById(id);
    }

    /**
     * @方法说明:更新记录
     **/
    @Transactional
    public int update(${className} ${classname}) {
        return dao.update(${classname});
    }

    /**
     * @方法说明:按条件查询分页列表
     **/
    public Page<${className}> queryPage(${className}Cond cond) {
        return dao.queryPage(cond);
    }

    /**
     * @方法说明:按条件查询不分页列表(使用范型)
     **/
    public List<${className}> queryList(${className}Cond cond) {
        return dao.queryList(cond);
    }

    /**
     * @方法说明:按条件查询记录个数
     **/
    public int queryCount(${className}Cond cond) {
        return dao.queryCount(cond);
    }
}